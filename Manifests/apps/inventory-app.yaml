apiVersion: v1
kind: Service
metadata:
  name: inventory-app
  namespace: microservices
spec:
  selector:
    app: inventory-app
  ports:
    - port: 8080
      targetPort: 8080
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: inventory-app
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: inventory-app
  template:
    metadata:
      labels:
        app: inventory-app
    spec:
      containers:
        - name: inventory-app
          image: nocrarii/inventory-app:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          env:
            - name: PORT
              value: "8080"
            - name: DB_HOST
              valueFrom: { configMapKeyRef: { name: app-config, key: INVENTORY_DB_HOST } }
            - name: DB_PORT
              valueFrom: { configMapKeyRef: { name: app-config, key: INVENTORY_DB_PORT } }
            - name: DB_NAME
              value: "inventory"
            - name: DB_USER
              valueFrom: { secretKeyRef: { name: db-secrets, key: postgres-user } }
            - name: DB_PASSWORD
              valueFrom: { secretKeyRef: { name: db-secrets, key: postgres-password } }

            # Alias PG* (certaines libs les lisent directement)
            - name: PGHOST
              valueFrom: { configMapKeyRef: { name: app-config, key: INVENTORY_DB_HOST } }
            - name: PGPORT
              valueFrom: { configMapKeyRef: { name: app-config, key: INVENTORY_DB_PORT } }
            - name: PGDATABASE
              value: "inventory"
            - name: PGUSER
              valueFrom: { secretKeyRef: { name: db-secrets, key: postgres-user } }
            - name: PGPASSWORD
              valueFrom: { secretKeyRef: { name: db-secrets, key: postgres-password } }

          startupProbe:
            tcpSocket: { port: 8080 }
            failureThreshold: 30
            periodSeconds: 5
          livenessProbe:
            tcpSocket: { port: 8080 }
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            httpGet: { path: /ready, port: 8080 }
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 6
          resources:
            requests: { cpu: "100m", memory: "128Mi" }
            limits:   { cpu: "200m", memory: "256Mi" }
