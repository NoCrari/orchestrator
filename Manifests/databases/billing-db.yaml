apiVersion: v1
kind: Service
metadata:
  name: billing-db
  namespace: microservices
spec:
  selector:
    app: billing-db
  ports:
    - port: 5432
      targetPort: 5432
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: billing-db
  namespace: microservices
spec:
  serviceName: billing-db
  replicas: 1
  selector:
    matchLabels:
      app: billing-db
  template:
    metadata:
      labels:
        app: billing-db
    spec:
      containers:
        - name: postgres
          image: nocrarii/billing-db:v4
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              valueFrom: { secretKeyRef: { name: db-secrets, key: postgres-user } }
            - name: POSTGRES_PASSWORD
              valueFrom: { secretKeyRef: { name: db-secrets, key: postgres-password } }
            - name: POSTGRES_DB
              value: "billing"
            - name: PGDATA
              value: /var/lib/postgresql/data
          volumeMounts:
            - name: billing-storage
              mountPath: /var/lib/postgresql/data
          resources:
            requests: { cpu: "250m", memory: "256Mi" }
            limits:   { cpu: "500m", memory: "512Mi" }
          livenessProbe:
            tcpSocket: { port: 5432 }
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            tcpSocket: { port: 5432 }
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 6
  volumeClaimTemplates:
    - metadata:
        name: billing-storage
      spec:
        accessModes: ["ReadWriteOnce"]   # <- fix: accessModes (pas accessMasks)
        storageClassName: local-path
        resources:
          requests:
            storage: 5Gi
